{"hash":"23c5a0808afcefbf6c87f6b9ce8de4ac23bfba70","data":{"post":{"title":"Security Based Publishing Restrictions in Sitecore","description":"Providing publishing based on item security","date":"August 19, 2015","timeToRead":2,"content":"<h2 id=\"problem\"><a href=\"#problem\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Problem...</h2>\n<p>In order to grant a user permissions to publish in Sitecore, they need to be part\nof the <em>Sitecore Client Publishing</em> role. Once a user is a member of this role,\nthe publishing buttons become visible to the user within the content editor ribbon\nas well as the main menu. The consequence of this is that it grants the user permission\nto publish everything via a site publish and in larger applications this can prevent\nother users from publishing for hours with no easy way to cancel the publish job.</p>\n<p>Out of the box Sitecore provides a couple of options around this:</p>\n<ul>\n<li>\n<p>Remove read permissions to the 'Publish site' option for the role. To do this, edit the read permission on the core database item <em>/sitecore/content/Applications/Content Editor/Menues/Publish/Publish Site</em>.</p>\n<ul>\n<li>Issue: A user could still initiate a publish from the /sitecore root item and include\nall sub-items, effectively performing a site publish.</li>\n</ul>\n</li>\n<li>\n<p>Configure a publishing scheduled task to perform an periodic incremental publish picking up all new changes.</p>\n<ul>\n<li>Issue: If workflow isn't enabled on all items you can end up with things published\nthat are incomplete.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"solution\"><a href=\"#solution\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Solution...</h2>\n<p>A potential solution around this is to hide the publishing buttons on items which the\ncontext user doesn't have permissions to write to, therefore only allowing them to publish\nsections of the tree that they can author. For areas of the tree where they only have read\naccess, the publishing button will be hidden. To achieve this, you can follow these steps:</p>\n<ol>\n<li>\n<p>Create a new class that inherits the Sitecore default command and add logic to the\n<em>QueryState</em> method to check for write access, for example:\n`<code></code>csharp\npublic class PublishItemCheckSecurity : PublishItem\n{\npublic override CommandState QueryState(CommandContext context)\n{\nvar item = context.Items[0];</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">    var baseState = base.QueryState(context);\n\n    return baseState == CommandState.Enabled &amp;&amp; item != null &amp;&amp; !item.Security.CanWrite(Context.User)\n        ? CommandState.Hidden\n        : baseState;\n    }\n}</span></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\"></span></span></code></pre>\n</li>\n<li>Patch in the new command referenced in step 1 to replace the default Sitecore command:\n<code>xml &#x3C;configuration xmlns:patch=\"http://www.sitecore.net/xmlconfig/\"> &#x3C;sitecore> &#x3C;commands> &#x3C;command name=\"item:publishnow\"> &#x3C;patch:attribute name=\"type\">Your.Namespace.PublishItemCheckSecurity, Your.Namespace&#x3C;/patch:attribute> &#x3C;/command> &#x3C;/commands> &#x3C;/sitecore> &#x3C;/configuration></code></li>\n</ol>\n<p>Once your solution recompiled, create a new user which is a member of the <em>Sitecore Client Publishing</em>\nrole and then viewing different content items should see the button appearing for items\nthe user can write to and disappearing for items that they cannot.</p>\n","tags":[{"title":"sitecore","path":"/tag/sitecore/"}],"references":[],"path":"/security-based-publishing-restrictions-in-sitecore/"}},"context":{}}